{"version":3,"sources":["ethereum/web3.js","ethereum/Dvote.js","App.js","reportWebVitals.js","index.js"],"names":["web3","window","ethereum","request","method","Web3","provider","providers","HttpProvider","Dvote","eth","Contract","JSON","parse","voteJson","interface","App","useState","loading","setLoading","message","setMessage","input","setInput","list","setList","selectedC","setSelectedC","winner","setWinner","useLayoutEffect","getCounts","a","methods","getCandidatesCount","call","candidatesCount","Promise","all","Array","parseInt","fill","map","element","index","Candidates","candidateList","addCandidate","getAccounts","accounts","send","from","rankList","sort","b","voteCount","vote","finalizeElection","finalize","Winner","className","candidate","name","can","value","onChange","e","currentTarget","onClick","id","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ffc365d.chunk.js","sourcesContent":["import Web3 from \"web3\";\n \nlet web3;\n \nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  // We are in the browser and metamask is running.\n  window.ethereum.request({ method: \"eth_requestAccounts\" });\n  web3 = new Web3(window.ethereum);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  const provider = new Web3.providers.HttpProvider(\n    'https://rinkeby.infura.io/v3/69a73dc114a9424a9e0254f01291850c'\n  );\n  web3 = new Web3(provider);\n}\n \nexport default web3;","import web3 from './web3'\nimport voteJson from './build/Dvote.json'\n\n\n\n\nconst Dvote = new web3.eth.Contract(JSON.parse(voteJson.interface), '0x9d95953380C56B89288E3dfd3DF78f354191E74f')\n\nexport default Dvote","import { useLayoutEffect, useState } from 'react';\n\n\nimport './App.css';\nimport Dvote from './ethereum/Dvote'\nimport web3 from './ethereum/web3';\n\nconst App = () => {\n  const [loading, setLoading ] = useState(false)\n  const [ message, setMessage ] = useState('')\n  const [ input, setInput ] = useState('')\n  const [list, setList] = useState([])\n  const [selectedC, setSelectedC ] = useState('10000')\n  const [winner, setWinner ] = useState('')\n\n  useLayoutEffect(() => {\n    getCounts()\n  },[])\n\n  const getCounts = async () => {\n    const candidatesCount = await Dvote.methods.getCandidatesCount().call()\n\n    const candidateList = \n      await Promise\n      .all(Array(parseInt(candidatesCount))\n      .fill()\n      .map((element, index) => {\n      return Dvote.methods.Candidates(index).call()\n    }))\n    setList(candidateList)\n\n  }\n  const addCandidate = async () => {\n    try {\n      setMessage('')\n      setLoading(true)\n      const accounts = await web3.eth.getAccounts()\n      await Dvote.methods.addCandidate(input).send({from: accounts[0]})\n      getCounts()\n      \n    } catch (error) {\n      setMessage(error.message)\n    }\n    setLoading(false)\n    setInput('')\n\n\n  }\n\n  const rankList = list\n\n  rankList.sort((a, b) => b.voteCount - a.voteCount)\n\n  const vote = async () => {\n    try {\n      setMessage('')\n      setLoading(true)\n      const accounts = await web3.eth.getAccounts()\n      await Dvote.methods.vote(selectedC).send({from: accounts[0]})\n      getCounts()\n      setSelectedC('10000')\n      \n    } catch (error) {\n      setMessage(error.message)\n    }\n    setLoading(false)\n  }\n\n  const finalizeElection = async () => {\n    setLoading(true)\n    const accounts = await web3.eth.getAccounts()\n\n    const Winner = await Dvote.methods.finalize().call({from: accounts[0]})\n    setLoading(false)\n    setWinner(Winner)\n    \n  }\n  return (\n    <>\n    <h1>DElection 2020</h1>\n    <div className='app' >\n      <div className='body-box'>\n        <div>\n          <h3>RANKING</h3>\n          <table className='rankTable'>\n            <thead>\n              <tr>\n                <td>Rank</td>\n                <td>Name</td>\n                <td>Votes</td>\n              </tr>\n              \n            </thead>\n            <tbody>\n              {rankList.map((candidate, index) => {\n                return <tr>\n                  <td>{index+1}</td>\n                  <td>{candidate.name}</td>\n                  <td>{candidate.voteCount}</td>\n                </tr>\n              })}\n            </tbody>\n          </table>\n        </div>\n        <div className='listBox'>\n          <h3>CANDIDATES</h3>\n          <ul>\n            {list.map((can, index) => <li key={index}>{can.name}</li>)}\n          </ul>\n        </div>\n      </div>\n      <div className='bottomBox'>\n        <div className='votingSection'>\n          <h2>VOTE HERE!!!</h2>\n          <select value={selectedC} onChange={e => setSelectedC(e.currentTarget.value)} >\n            <option value='10000' >Pick yours</option>\n            {list.map((candidate, index) => <option key={index} value={index} >{candidate.name}</option>)}\n          </select>\n          {selectedC != 10000 && <button onClick={vote}>{loading ? 'processing...' : 'Vote'}</button>}\n        </div>\n\n        <div >\n          <h2>MANAGER SECTION</h2>\n          <div className='onlyManager'>\n            <div className='add-form'>\n                <h4>Add candidate!</h4>\n                <input \n                  id='input' \n                  value={input} \n                  onChange={\n                    event => setInput(event.target.value)\n                  }/>\n                <button \n                  className='submit-btn'\n                  onClick={addCandidate}\n                  >\n                    {loading ? 'proccessing...' : 'Submit'}\n                  </button>\n            </div>\n            <div className='finalize'>\n              <h3>{ winner && winner}</h3>\n                <h4 >\n                  Finalize Election!\n                </h4>\n                <button onClick={finalizeElection} className='submit-btn'>GET WINNER!</button>\n              </div>\n            </div>\n\n          </div>\n\n          </div>\n        {message && <h3 className='errorMessage'>{message}</h3>}\n\n    </div>\n</>\n  );\n}\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}